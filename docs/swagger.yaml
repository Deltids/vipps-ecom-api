swagger: '2.0'
info:
  description: >+
    # Vipps eCommerce API

    Additional API documentation: https://github.com/vippsas/vipps-ecom-api/
  version: '1.0.1'
  title: Vipps eCommerce APIs
host: apitest.vipps.no
tags:
  - name: Authorization Service
    description: Authorization Service
  - name: Vipps eCom API
    description: Functionality provided by the Vipps eCommerce API
  - name: Endpoints required by Vipps from the merchant
    description: These endpoints must be implemented by the merchant, and are called by Vipps.
paths:
  /accesstoken/get:
    post:
      tags:
        - Authorization Service
      summary: Fetch authorization token
      parameters:
        - name: client_id
          in: header
          description: >-
            Client id is located in the [developer portal](https://apitest-portal.vipps.no/). Navigate to the ```Applications``` tab and click the ```View secrets``` button to display the client id. See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.
          required: true
          type: string
          format: guid
        - name: client_secret
          in: header
          description: >-
            Client secret is located in the [developer portal](https://apitest-portal.vipps.no/). Navigate to the ```Applications``` tab and click the ```View secrets``` button to display the client id. See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.
          required: true
          type: string
        - name: ocp-apim-subscription-key
          in: header
          description: >-
            The subscription-key for authorization token is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. The ```DEFAULT_ACCESSTOKEN``` key is the value for subscription-key. See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.
          required: true
          type: string
      description: >-
        Authorization token API endpoint helps to get the JWT Bearer token that
        needs to be passed in every API request in the authorization header. The
        merchant application use the API to get a JWT access token. JWT access
        token is a base 64 encoded string value that must be aquire first before
        making any Vipps api calls
      operationId: fetchAuthorizationTokenUsingPost
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AuthorizationTokenResponse'
        '400':
          description: Bad request (Missing a required parameter or bad request format)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '[consentRemovalPrefix]/v2/consents/{userId}':
    delete:
      tags:
        - Endpoints required by Vipps from the merchant
      summary: Remove User Consent (for express checkout)
      description: >-
        This API endpoint on the merchant side allows Vipps to send consent removal requests to merchant.
        When receiving requests the merchant is obliged to remove the user details permanently, as per the GDPR guidelines.
        URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons
        [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).
      operationId: removeUserConsentUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          type: string
      responses:
        '200':
          description: Remove User Consent (for express checkout)
        '400':
          description: Bad request (Missing a required parameter or bad request format)
        '401':
          description: Unauthorized
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '[shippingDetailsPrefix]/v2/payments/{orderId}/shippingDetails':
    post:
      tags:
        - Endpoints required by Vipps from the merchant
      summary: Fetch Shipping Cost & Method
      description: >-
        This API endpoint on the merchant side allows Vipps to get the shipping cost and method based on
        the provided address and product details. The primary use of this service
        is Vipps HUrtigkasse (express checkout) where Vipps needs to present
        shipping cost and method to the Vipps user.
        URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons
        [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).
      operationId: fetchShippingCostUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: string
        - in: body
          name: fetchShippingCostAndMethod
          description: fetchShippingCostAndMethod
          required: true
          schema:
            $ref: '#/definitions/FetchShippingCostAndMethod'
      responses:
        '200':
          description: Fetch Shipping Cost & Method.
          schema:
            $ref: '#/definitions/FetchShippingCostResponse'
        '400':
          description: Bad request (Missing a required parameter or bad request format)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '/ecomm/v2/payments':
    post:
      tags:
        - Vipps eCom API
      summary: Initiate Payment
      description: >-
        This API call allows the merchants to initiate a payment flow by using
        Vipps. In order to identify which sales channel payments are coming from, a
        merchantSerialNumber is used to distinguish between them. Please note
        that a single payment is uniquely identified by a composite of
        merchantApplicationId (X-App-ID), merchantSerialNumber and orderId. The
        Merchant provided orderId must be unique per sales channel. Once the transaction is
        successfully initiated in Vipps, will you receive a redirect URL in response which has to be used by the merchant to open
        the Vipps landing page. The landing page will have functionality to
        identify and differentiate request coming from mobile browser/desktop
        browser.
        URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons
        [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).
      operationId: initiatePaymentV3UsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - in: header
          name: authorization
          description: >-
            Authorization-token is obtained by running the /accesstoken/get request.
          required: true
          type: string
        - in: header
          name: content-type
          description: >-
            `application/json`
          required: true
          type: string
        - in: header
          name: ocp-apim-subscription-key
          description: >-
            The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.
          required: true
          type: string
        - in: body
          name: initiatePaymentCommand
          description: initiatePaymentCommand
          required: true
          schema:
            $ref: '#/definitions/InitiatePaymentCommand'
      responses:
        '202':
          description: Response for Initiate Payment
          schema:
            $ref: '#/definitions/InitiatePaymentV2Representation'
        '400':
          description: Bad request (Missing a required parameter or bad request format)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '[callbackPrefix]/v2/payments/{orderId}':
    post:
      tags:
        - Endpoints required by Vipps from the merchant
      summary: 'Callback : Transaction Update'
      description: >-
        This API call allows Vipps to send the transaction details. During regular
        ecomm payment order and transaction details will be shared. During
        express checkout payment it will provide user details and shipping
        details addition to the order and transaction details.
      operationId: transactionUpdateCallbackForRegularPaymentUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: string
        - in: body
          name: expressCheckOutPaymentRequest
          description: expressCheckOutPaymentRequest
          required: true
          schema:
            $ref: '#/definitions/ExpressCheckOutPaymentRequest'
      responses:
        '200':
          description: 'Callback : Transaction Update'
        '400':
          description: Bad request (Missing a required parameter or bad request format)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong on the Vipps server side
  '/ecomm/v2/payments/{orderId}/capture':
    post:
      tags:
        - Vipps eCom API
      summary: 'Capture Payment '
      description: >-
        This API call allows merchant to capture the reserved amount. Amount to
        capture cannot be higher than reserved. The API also allows capturing
        partial amount of the reserved amount. Partial capture can be called as
        many times as required so long there is reserved amount to capture.
        Transaction text is not optional and is used as a proof of delivery
        (tracking code, consignment number etc.). In a case of direct capture,
        both fund reservation and capture are executed in a single operation.
      operationId: capturePaymentUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: Order id specified in the request body of initiate payment.
          required: true
          type: string
        - in: header
          name: authorization
          description: >-
            Authorization-token is obtained by running the /accesstoken/get request.
          required: true
          type: string
        - in: header
          name: content-type
          description: >-
            `application/json`
          required: true
          type: string
        - in: header
          name: ocp-apim-subscription-key
          description: >-
            The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.
          required: true
          type: string
        - in: body
          name: paymentActionsRequest
          description: paymentActionsRequest
          required: true
          schema:
            $ref: '#/definitions/PaymentActionsRequest'
      responses:
        '200':
          description: Capture payment response
          schema:
            $ref: '#/definitions/TransactionResponse'
        '400':
          description: Bad request (Missing a required parameter or bad request format)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '/ecomm/v2/payments/{orderId}/cancel':
    put:
      tags:
        - Vipps eCom API
      summary: Cancel Payment
      description: >-
        The API call allows merchant to cancel the reserved transaction, The API
        will not allow partial cancellation which has the consequence that
        partially captured transactions cannot be cancelled. Please note that in
        a case of communication errors during initiate payment service call
        between Vipps and PSP/Acquirer/Issuer; even in a case that customer has
        confirmed a payment, the payment will be cancelled by Vipps. Note this
        means you can not cancel a captured payment.
      operationId: cancelPaymentRequestUsingPUT
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: Order id specified in the request body of initiate payment.
          required: true
          type: string
        - in: header
          name: authorization
          description: >-
            Authorization-token is obtained by running the /accesstoken/get request.
          required: true
          type: string
        - in: header
          name: content-type
          description: >-
            `application/json`
          required: true
          type: string
        - in: header
          name: ocp-apim-subscription-key
          description: >-
            The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.
          required: true
          type: string
        - in: body
          name: paymentActionsRequest
          description: paymentActionsRequest
          required: true
          schema:
            $ref: '#/definitions/CancelPaymentActionRequest'
      responses:
        '200':
          description: Cancel payment response
          schema:
            $ref: '#/definitions/TransactionResponse'
        '400':
          description: Bad request (Missing a required parameter or bad request format)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '/ecomm/v2/payments/{orderId}/refund':
    post:
      tags:
        - Vipps eCom API
      summary: 'Refund Payment '
      description: >-
        The API allows a merchant to do a refund of already captured
        transaction. There is an option to do a partial refund of the captured
        amount. Refunded amount cannot be larger than captured. Timeframe for
        issuing a refund for a payment is 365 days from the date payment has
        been captured. If the refund payment service call is called after the
        refund timeframe, service call will respond with an error. Refunded
        funds will be transferred from the merchant account to the customer
        credit card that was used in payment flow. Pay attention that in order
        to perform refund, there must be enough funds at merchant settlements
        account.
      operationId: refundPaymentUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: Order id specified in the request body of initiate payment.
          required: true
          type: string
        - in: header
          name: authorization
          description: >-
            Authorization-token is obtained by running the /accesstoken/get request.
          required: true
          type: string
        - in: header
          name: content-type
          description: >-
            `application/json`
          required: true
          type: string
        - in: header
          name: ocp-apim-subscription-key
          description: >-
            The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.
          required: true
          type: string
        - in: body
          name: paymentActionsRequest
          description: paymentActionsRequest
          required: true
          schema:
            $ref: '#/definitions/PaymentActionsRequest'
      responses:
        '200':
          description: Refund payment response
          schema:
            $ref: '#/definitions/RefundTransactionResponse'
        '400':
          description: Bad request (Missing a required parameter or bad request format)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '/ecomm/v2/payments/{orderId}/details':
    get:
      tags:
        - Vipps eCom API
      summary: Get payment Details
      description: >-
        This API call allows merchant to get the details of a payment transaction.
        Service call returns detailed transaction history of given payment where
        events are sorted by the time single transaction occurred.
      operationId: getPaymentDetailsUsingGET
      consumes:
        - application/json
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: Order id specified in the request body of initiate payment.
          required: true
          type: string
        - in: header
          name: authorization
          description: >-
            Authorization-token is obtained by running the `/accesstoken/get` request.
          required: true
          type: string
        - in: header
          name: content-type
          description: >-
            `application/json`
          required: true
          type: string
        - in: header
          name: ocp-apim-subscription-key
          description: >-
            The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.
          required: true
          type: string
      responses:
        '200':
          description: Get payment Details
          schema:
            $ref: '#/definitions/GetTransactionDetails'
        '400':
          description: Bad request (Missing a required parameter or bad request format)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
  '/ecomm/v2/payments/{orderId}/status':
    get:
      tags:
        - Vipps eCom API
      summary: Get order status
      description: >-
        This API call allows the merchant to get the status of the last payment
        transaction. Primarily use of this service is meant for inApp where
        simple response to check order status is preferred.
      operationId: getOrderStatusUsingGET
      consumes:
        - application/json
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: orderId
          in: path
          description: Order id specified in the request body of initiate payment.
          required: true
          type: string
        - in: header
          name: authorization
          description: >-
            Authorization-token is obtained by running the /accesstoken/get request.
          required: true
          type: string
        - in: header
          name: ocp-apim-subscription-key
          description: >-
            The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.
          required: true
          type: string
      responses:
        '200':
          description: Get order status
          schema:
            $ref: '#/definitions/GetPaymentStatusResponse'
        '400':
          description: Bad request (Missing a required parameter or bad request format)
        '401':
          description: Unauthorized
        '402':
          description: Payment Failed
        '403':
          description: Request Forbidden
        '404':
          description: Resource Not Found
        '405':
          description: Request method not supported
        '415':
          description: Unsupported media type
        '500':
          description: Something went wrong from Vipps Server side
definitions:
  PaymentActionsRequest:
    type: object
    properties:
      merchantInfo:
        $ref: '#/definitions/MerchantInfoPayment'
      transaction:
        $ref: '#/definitions/Transaction'
  Address:
    type: object
    required:
      - addressLine1
      - city
      - country
      - zipCode
    properties:
      addressLine1:
        type: string
        description: Address Line 1
      addressLine2:
        type: string
        description: Address Line 2
      city:
        type: string
        description: City
      country:
        type: string
        description: 'Country,default=NO'
      zipCode:
        type: string
        description: Zip Code
  PaymentShippingDetails:
    type: object
    required:
      - shippingCost
      - shippingMethod
    properties:
      address:
        $ref: '#/definitions/Address'
      shippingCost:
        type: number
        format: double
        description: Shipping Cost
      shippingMethod:
        type: string
        description: Shipping method
  TransactionLogHistory:
    type: object
    properties:
      amount:
        type: integer
        format: int32
      operation:
        type: string
      operationSuccess:
        type: boolean
      requestId:
        type: string
      timeStamp:
        type: string
      transactionId:
        type: string
      transactionText:
        type: string
  CancelTransaction:
    type: object
    properties:
      transactionText:
        type: string
  UserDetails:
    type: object
    required:
      - email
      - firstName
      - lastName
      - mobileNumber
      - userId
    properties:
      bankIdVerified:
        type: string
      dateOfBirth:
        type: string
        description: 12-3-1988
        example: "12-3-1988"
      email:
        type: string
        description: Email address
        example: user@example.com
      firstName:
        type: string
        description: First name
        example: Ada
      lastName:
        type: string
        description: Last name
        example: Lovelace
      mobileNumber:
        type: string
        description: '12345678'
        minLength: 8
        maxLength: 12
        pattern: '^\d{8,12}$'
      ssn:
        type: string
        description: '12345678912'
        minLength: 11
        maxLength: 11
        pattern: '^\d{11}$'
      userId:
        type: string
        description: '1234567'
  OrderStatusInfoTransactionInfo:
    type: object
    required:
      - amount
      - status
      - timeStamp
      - transactionId
    properties:
      amount:
        type: number
        format: double
        description: Ordered amount in øre
      status:
        type: string
        enum: [INITIATE, RESERVE, CANCEL, CAPTURE, REFUND, VOID]
        description: >-
          Status which gives the current state of the payment within Vipps
        example: "Captured"
      timeStamp:
        type: string
        description: Timestamp in ISO-8601 representing when Vipps cancelled the transaction.
      transactionId:
        type: string
        description: Vipps transaction id
  TransactionInfo:
    type: object
    required:
      - amount
      - status
      - timeStamp
      - transactionId
      - transactionText
    properties:
      amount:
        type: number
        format: double
        description: Ordered amount in øre
      status:
        type: string
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters
      timeStamp:
        type: string
        description: Timestamp in ISO-8601 representing when vipps Cancelled transaction.
      transactionId:
        type: string
        description: Vipps transaction id
      transactionText:
        type: string
        description: Transaction text reference provided by merchant
  GetTransactionDetails:
    type: object
    properties:
      orderId:
        type: string
      shippingDetails:
        $ref: '#/definitions/PaymentShippingDetails'
      transactionLogHistory:
        type: array
        items:
          $ref: '#/definitions/TransactionLogHistory'
      transactionSummary:
        $ref: '#/definitions/TransactionSummary'
      userDetails:
        $ref: '#/definitions/UserDetails'
  InitiatePaymentV2Representation:
    type: object
    required:
      - orderId
      - url
    properties:
      orderId:
        type: string
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters.
      url:
        type: string
        description: >-
          URL parameter will have URL to redirect the request to vipps gateway
          page in case request is trigger from web browser or deeplink URL to
          open vipps app incase request is triggered from Merchant Mobile App.
  ShippingDetailsRequest:
    type: object
    required:
      - address
      - shippingCost
      - shippingMethod
    properties:
      address:
        description: Address Details
        $ref: '#/definitions/AddressDetails'
      shippingCost:
        type: number
        format: double
        description: Shipping cost
      shippingMethod:
        type: string
        description: Shipping method which choosed for the payment
  TransactionResponse:
    type: object
    required:
      - orderId
    properties:
      orderId:
        type: string
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters
      transactionInfo:
        $ref: '#/definitions/TransactionInfo'
      transactionSummary:
        $ref: '#/definitions/TransactionSummary'
  RefundTransactionResponse:
    type: object
    required:
      - orderId
    properties:
      orderId:
        type: string
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters.
        maxLength: 30
      transaction:
        $ref: '#/definitions/TransactionInfo'
      transactionSummary:
        $ref: '#/definitions/TransactionSummary'
  MerchantInfoPayment:
    type: object
    required:
      - merchantSerialNumber
    properties:
      merchantSerialNumber:
        type: string
        description: >-
          Unique id for this merchant's sales channel: website, mobile app etc.
          Short name: MSN.
        minLength: 6
        maxLength: 6
        example: 123456
        pattern: '^\d{6}$'
  AddressDetails:
    type: object
    required:
      - addressLine1
      - city
      - country
      - zipCode
    properties:
      addressLine1:
        type: string
      addressLine2:
        type: string
      city:
        type: string
        description: City
      country:
        type: string
        description: "The only country supported is Norway"
      zipCode:
        type: integer
        format: int32
        description: Four digits
        pattern: '^\d{4}$'
        example: 0191
  ShippingDetails:
    type: object
    properties:
      isDefault:
        type: string
      priority:
        type: integer
        format: int32
      shippingCost:
        type: number
        format: double
      shippingMethod:
        type: string
  InitiatePaymentCommand:
    type: object
    required:
      - customerInfo
      - merchantInfo
      - transaction
    properties:
      customerInfo:
        description: it has customer information and it is not required
        $ref: '#/definitions/CustomerInfoDto'
      merchantInfo:
        description: it has merchant related information to initiate the payment
        $ref: '#/definitions/MerchantInfoDto'
      transaction:
        description: it has transaction details which needs to be inititated
        $ref: '#/definitions/TransactionInfoInitiateDTO'
  TransactionInfoInitiateDTO:
    type: object
    required:
      - amount
      - orderId
      - transactionText
    properties:
      amount:
        type: integer
        format: int32
        description: Amount in øre. 32 bit Integer (2147483647)
        pattern: '^\d{3,}$'
      orderId:
        type: string
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters.
        maxLength: 30
      refOrderId:
        type: string
        description: >-
          Identifies if the payment references to some past orders registered
          with Vipps. If defined, transactions for this payment will show up as
          child transactions of the specified order.
        maxLength: 30
      timeStamp:
        type: string
        format: date-time
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters.
      transactionText:
        type: string
        description: Transaction text that can be displayed to end user
        maxLength: 100
  MerchantInfoDto:
    type: object
    required:
      - callbackPrefix
      - fallBack
      - isApp
      - merchantSerialNumber
    properties:
      authToken:
        type: string
        description: >-
          The Merchant should share this token if merchant has authentication
          mechanism in place which could be used for making callbacks secure.
        maxLength: 255
      callbackPrefix:
        type: string
        description: >-
          This is an URL for receiving the callback after the payment request. Domain name
          and context path should be provided by merchant as the value for this
          parameter. The rest of the URL will be appended by Vipps according to
          Vipps guidelines.
          URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons
          [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).
        maxLength: 255
        example: 'https://example.com/vipps/callbacks/'
      consentRemovalPrefix:
        type: string
        description: >-
          Required for expess checkout payments. This callback URL will be used
          by Vipps to inform the merchant that the user has revoked his/her
          consent: This Vipps user does do not want the merchant to store or
          use his/her personal information anymore. Required by GDPR.
          URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons
          [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).
        maxLength: 255
        example: 'https://example.com/vipps/consents/'
      fallBack:
        type: string
        description: >-
          Vipps will use the fall back URL to redirect Merchant Page once
          Payment is completed in Vipps System
          URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons
          [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).
        maxLength: 255
        example: 'https://example.com/vipps/fallback/'
      isApp:
        type: boolean
        example: false
        description: >-
          This parameter indicates whether payment request is triggered from
          Mobile App or Web browser. Based on this value, response will be
          redirect URL for Vipps landing page or deeplink URL to connect vipps
          App.
          When isApp is set to true, URLs passed to Vipps will not be validated as regular URLs.
      merchantSerialNumber:
        type: string
        description: >-
          Unique id for this merchant's sales channel: website, mobile app etc.
          Short name: MSN.
        minLength: 6
        maxLength: 6
        example: 123456
        pattern: '^\d{6}$'
      paymentType:
        type: string
        description: >-
          This parameter will identify difference between a regular ecomm payment
          and ecomm express payment.
          For express checkout, use: "express checkout payment".
          Express checkouts require consentRemovalPrefix.
        enum:
          - regular payment
          - express checkout payment
        example:
      shippingDetailsPrefix:
        type: string
        description: >-
          In case of express checkout payment, merchant should pass this prefix
          to let Vipps fetch shipping cost and method related details.
        maxLength: 255
        example: 'https://example.com/vipps/shipping/'
  GetPaymentStatusResponse:
    type: object
    properties:
      orderId:
        type: string
      transactionInfo:
        $ref: '#/definitions/OrderStatusInfoTransactionInfo'
  Transaction:
    type: object
    required:
      - transactionText
    properties:
      amount:
        type: integer
        format: int32
        description: >-
          Amount in øre, if amount is 0 or not provided then full capture will
          be performed. 32 Bit Integer (2147483647)
        pattern: '^\d{3,}$'
      transactionText:
        type: string
        description: Proof of delivery
  FetchShippingCostAndMethod:
    type: object
    required:
      - addressId
      - addressLine1
      - city
      - country
      - postCode
    properties:
      addressId:
        type: integer
        format: int32
        description: >-
          Vipps Provided address Id. To be returned in response in the same
          field
      addressLine1:
        type: string
      addressLine2:
        type: string
      city:
        type: string
        description: City
      country:
        type: string
        description: "The only country supported is Norway"
      postCode:
        type: integer
        format: int32
        description: Four digits
        pattern: '^\df{4}$'
        example: 0191
  CustomerInfoDto:
    type: object
    properties:
      mobileNumber:
        type: string
        description: >-
          Mobile number of the user who has to pay for the transation from
          Vipps. Allowed format: xxxxxxxx
        minLength: 8
        maxLength: 8
        example: 91234567
        pattern: '^\d{8}$'
  CancelPaymentActionRequest:
    type: object
    properties:
      merchantInfo:
        $ref: '#/definitions/MerchantInfoPayment'
      transaction:
        $ref: '#/definitions/CancelTransaction'
  ExpressCheckOutPaymentRequest:
    type: object
    required:
      - merchantSerialNumber
      - orderId
      - shippingDetails
      - userDetails
    properties:
      merchantSerialNumber:
        type: string
        description: >-
          Unique id for this merchant's sales channel: website, mobile app etc.
          Short name: MSN.
        minLength: 6
        maxLength: 6
        example: 123456
        pattern: '^\d{6}$'
      orderId:
        type: string
        description: >-
          Id which uniquely identifies a payment. Maximum length is 30
          alphanumeric characters
      shippingDetails:
        description: >-
          Shipping Details will be added in the call back request if the payment
          is Express Checkout
        $ref: '#/definitions/ShippingDetailsRequest'
      transactionInfo:
        $ref: '#/definitions/OrderStatusInfoTransactionInfo'
      userDetails:
        description: Vipps User Information
        $ref: '#/definitions/UserDetails'
  AuthorizationTokenResponse:
    type: object
    properties:
      token_type:
        type: string
      access_token:
        type: string
      ext_expires_in:
        type: integer
      not_before:
        type: integer
      expires_in:
        type: integer
        format: int32
      resource:
        type: string
  AuthorizationTokenMethod:
    type: object
  FetchShippingCostResponse:
    type: object
    properties:
      addressId:
        type: integer
        format: int32
      orderId:
        type: string
      shippingDetails:
        type: array
        items:
          $ref: '#/definitions/ShippingDetails'
  TransactionSummary:
    type: object
    required:
      - capturedAmount
      - refundedAmount
      - remainingAmountToCapture
      - remainingAmountToRefund
    properties:
      capturedAmount:
        type: integer
        format: int32
        description: Total amount captured
      refundedAmount:
        type: integer
        format: int32
        description: Total refunded amount of the order
      remainingAmountToCapture:
        type: integer
        format: int32
        description: Total remaining amount to capture
      remainingAmountToRefund:
        type: integer
        format: int32
        description: Total remaining amount to refund
